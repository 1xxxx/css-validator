/* CssParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CssParserTokenManager.java */
package org.w3c.css.parser.analyzer;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import java.net.URL;
import java.math.BigDecimal;
import org.w3c.css.values.CssValue;
import org.w3c.css.values.CssOperator;
import org.w3c.css.values.CssCheckableValue;
import org.w3c.css.values.CssExpression;
import org.w3c.css.values.CssString;
import org.w3c.css.values.CssURL;
import org.w3c.css.values.CssLength;
import org.w3c.css.values.CssNumber;
import org.w3c.css.values.CssAttr;
import org.w3c.css.values.CssCalc;
import org.w3c.css.values.CssColor;
import org.w3c.css.values.CssIdent;
import org.w3c.css.values.CssImage;
import org.w3c.css.values.CssPercentage;
import org.w3c.css.values.CssFrequency;
import org.w3c.css.values.CssTime;
import org.w3c.css.values.CssAngle;
import org.w3c.css.values.CssSwitch;
import org.w3c.css.values.CssFunction;
import org.w3c.css.values.CssUnicodeRange;
import org.w3c.css.values.CssResolution;
import org.w3c.css.values.CssRatio;
import org.w3c.css.values.CssSemitone;
import org.w3c.css.values.CssTypes;
import org.w3c.css.values.CssVolume;
import org.w3c.css.properties.css.CssProperty;
import org.w3c.css.parser.Frame;
import org.w3c.css.parser.CssError;
import org.w3c.css.parser.CssErrorToken;
import org.w3c.css.parser.CssSelectors;
import org.w3c.css.parser.CssParseException;
import org.w3c.css.parser.AtRule;
import org.w3c.css.media.AtRuleMedia;
import org.w3c.css.media.MediaFeature;
import org.w3c.css.parser.AtRuleFontFace;
import org.w3c.css.parser.AtRuleKeyframes;
import org.w3c.css.parser.AtRulePage;
import org.w3c.css.parser.AtRulePreference;
import org.w3c.css.parser.AtRulePhoneticAlphabet;
import org.w3c.css.properties.svg.AtRuleColorProfile;
import org.w3c.css.util.ApplContext;
import org.w3c.css.util.CssProfile;
import org.w3c.css.util.CssVersion;
import org.w3c.css.util.InvalidParamException;
import org.w3c.css.util.WarningParamException;
import org.w3c.css.util.Util;
import org.w3c.css.util.Messages;
import org.w3c.css.selectors.AdjacentSiblingSelector;
import org.w3c.css.selectors.AttributeSelector;
import org.w3c.css.selectors.ChildSelector;
import org.w3c.css.selectors.ClassSelector;
import org.w3c.css.selectors.DescendantSelector;
import org.w3c.css.selectors.GeneralSiblingSelector;
import org.w3c.css.selectors.IdSelector;
import org.w3c.css.selectors.TypeSelector;
import org.w3c.css.selectors.UniversalSelector;
import org.w3c.css.selectors.attributes.AttributeAny;
import org.w3c.css.selectors.attributes.AttributeBegin;
import org.w3c.css.selectors.attributes.AttributeExact;
import org.w3c.css.selectors.attributes.AttributeOneOf;
import org.w3c.css.selectors.attributes.AttributeStart;
import org.w3c.css.selectors.attributes.AttributeSubstr;
import org.w3c.css.selectors.attributes.AttributeSuffix;

/** Token Manager. */
@SuppressWarnings("unused")public class CssParserTokenManager implements CssParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 37:
         jjmatchedKind = 105;
         return jjMoveNfa_0(7, 0);
      case 40:
         jjmatchedKind = 52;
         return jjMoveNfa_0(7, 0);
      case 41:
         jjmatchedKind = 51;
         return jjMoveNfa_0(7, 0);
      case 42:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 45:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 46:
         jjmatchedKind = 50;
         return jjMoveNfa_0(7, 0);
      case 47:
         jjmatchedKind = 46;
         return jjMoveNfa_0(7, 0);
      case 58:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000010L);
      case 59:
         jjmatchedKind = 45;
         return jjMoveNfa_0(7, 0);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 61:
         jjmatchedKind = 44;
         return jjMoveNfa_0(7, 0);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fffe0L);
      case 91:
         jjmatchedKind = 47;
         return jjMoveNfa_0(7, 0);
      case 93:
         jjmatchedKind = 48;
         return jjMoveNfa_0(7, 0);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x1000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 124:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 125:
         jjmatchedKind = 40;
         return jjMoveNfa_0(7, 0);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 0);
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 58:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xa00000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x42020L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x400000080L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x81200L);
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000004000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 1);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0L);
      case 62:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x280L);
      case 68:
      case 100:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20900L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80020L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400056400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 2);
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200008200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 80:
      case 112:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100040L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400010000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 3);
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         break;
      case 69:
      case 101:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x80L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active1, 0x1800L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active1, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active1, 0xc0000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x2040L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active1, 0x100000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x20L);
      case 84:
      case 116:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active1, 0x10400L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 4);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 4);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active1, 0x400L);
      case 65:
      case 97:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active1, 0x81000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active1, 0x110000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active1, 0x2840L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active1, 0xa0L);
      case 84:
      case 116:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x40000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 5);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 5);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active1, 0x40020L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active1, 0x400L);
      case 77:
      case 109:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active1, 0x80L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active1, 0x101000L);
      case 84:
      case 116:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 6);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 6);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0x480L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active1, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x80000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active1, 0x800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active1, 0x2000L);
      case 82:
      case 114:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 7;
         }
         break;
      case 84:
      case 116:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x100000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 7);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 7);
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x80480L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x800L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0x1000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x2000L);
      case 83:
      case 115:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 8;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 8);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 8);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active1, 0x80000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0x1000L);
      case 69:
      case 101:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 9;
         }
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x2000L);
      case 83:
      case 115:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 9);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 9);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0x80000L);
      case 69:
      case 101:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 10;
         }
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active1, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 10);
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active1, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 11);
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0x2000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active1, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 12);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 12);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 13;
         }
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa14_0(active1, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 13);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 13);
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active1, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 14);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 14);
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa16_0(active1, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 15);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 15);
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active1, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(7, 16);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(7, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(7, 16);
   }
   switch(curChar)
   {
      case 84:
      case 116:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(7, 17);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 769;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAddStates(0, 100); }
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(101, 120); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAddStates(121, 147); }
                  else if (curChar == 35)
                     { jjCheckNAddStates(148, 152); }
                  else if (curChar == 45)
                     { jjAddStates(153, 156); }
                  else if (curChar == 39)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAddStates(157, 161); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 36)
                        kind = 36;
                     { jjCheckNAddStates(162, 166); }
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 197;
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(20, 37); }
                  else if (curChar == 44)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 60)
                     { jjCheckNAddStates(167, 171); }
                  break;
               case 0:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 42)
                     { jjCheckNAddStates(172, 174); }
                  break;
               case 3:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 42)
                     { jjCheckNAddStates(175, 177); }
                  break;
               case 6:
                  if (curChar == 47 && kind > 1)
                     kind = 1;
                  break;
               case 9:
                  if (curChar == 43 && kind > 27)
                     kind = 27;
                  break;
               case 10:
                  if (curChar == 62 && kind > 29)
                     kind = 29;
                  break;
               case 11:
                  if (curChar == 44 && kind > 30)
                     kind = 30;
                  break;
               case 19:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(20, 37); }
                  break;
               case 20:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(178, 180); }
                  break;
               case 21:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 22:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 23:
                  if (curChar == 42)
                     { jjCheckNAddStates(181, 183); }
                  break;
               case 24:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 25:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 26:
                  if (curChar == 42)
                     { jjCheckNAddStates(184, 186); }
                  break;
               case 27:
                  if (curChar == 47)
                     { jjCheckNAddStates(178, 180); }
                  break;
               case 28:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 39:
                  if (curChar == 45)
                     { jjAddStates(187, 188); }
                  break;
               case 41:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 43:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(189, 193); }
                  break;
               case 45:
                  if (curChar != 10)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 46:
               case 55:
                  if (curChar == 13)
                     { jjCheckNAdd(45); }
                  break;
               case 47:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(194, 201); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(202, 205); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(206, 210); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(211, 216); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(217, 223); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(224, 228); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(229, 236); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(237, 240); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(241, 245); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(246, 251); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(252, 258); }
                  break;
               case 61:
                  if (curChar == 60)
                     { jjCheckNAddStates(167, 171); }
                  break;
               case 63:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(259, 263); }
                  break;
               case 64:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 65:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 66:
                  if (curChar == 42)
                     { jjCheckNAddStates(264, 266); }
                  break;
               case 67:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 68:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 69:
                  if (curChar == 42)
                     { jjCheckNAddStates(267, 269); }
                  break;
               case 70:
                  if (curChar == 47)
                     { jjCheckNAddStates(259, 263); }
                  break;
               case 71:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 72:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(73, 182); }
                  break;
               case 74:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(270, 275); }
                  break;
               case 75:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(276, 281); }
                  break;
               case 76:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(77, 78); }
                  break;
               case 77:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(77, 78); }
                  break;
               case 78:
                  if (curChar == 42)
                     { jjCheckNAddStates(282, 284); }
                  break;
               case 79:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 80:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 81:
                  if (curChar == 42)
                     { jjCheckNAddStates(285, 287); }
                  break;
               case 82:
                  if (curChar == 47)
                     { jjCheckNAddStates(276, 281); }
                  break;
               case 83:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 84:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(85, 101); }
                  break;
               case 86:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(288, 290); }
                  break;
               case 87:
                  if (curChar == 61)
                     { jjCheckNAddStates(291, 295); }
                  break;
               case 88:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(89, 131); }
                  break;
               case 90:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(296, 301); }
                  break;
               case 91:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(302, 307); }
                  break;
               case 92:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(93, 94); }
                  break;
               case 93:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(93, 94); }
                  break;
               case 94:
                  if (curChar == 42)
                     { jjCheckNAddStates(308, 310); }
                  break;
               case 95:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 96:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 97:
                  if (curChar == 42)
                     { jjCheckNAddStates(311, 313); }
                  break;
               case 98:
                  if (curChar == 47)
                     { jjCheckNAddStates(302, 307); }
                  break;
               case 99:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 100:
                  if (curChar == 62 && kind > 102)
                     kind = 102;
                  break;
               case 102:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(288, 290); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(314, 319); }
                  break;
               case 105:
                  if (curChar == 10)
                     { jjCheckNAddStates(288, 290); }
                  break;
               case 106:
               case 114:
                  if (curChar == 13)
                     { jjCheckNAdd(105); }
                  break;
               case 107:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(288, 290); }
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(320, 328); }
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(329, 333); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(334, 339); }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(340, 346); }
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(347, 354); }
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(355, 360); }
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(361, 369); }
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(370, 374); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(375, 380); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(381, 387); }
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(388, 395); }
                  break;
               case 121:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(296, 301); }
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(396, 403); }
                  break;
               case 123:
                  if (curChar == 10)
                     { jjCheckNAddStates(296, 301); }
                  break;
               case 124:
               case 133:
                  if (curChar == 13)
                     { jjCheckNAdd(123); }
                  break;
               case 125:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(404, 412); }
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(413, 423); }
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(424, 430); }
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(431, 438); }
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(439, 447); }
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(448, 457); }
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(458, 465); }
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(466, 476); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(477, 483); }
                  break;
               case 136:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(484, 491); }
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(492, 500); }
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(501, 510); }
                  break;
               case 139:
                  if (curChar == 34)
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 140:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 141:
                  if (curChar == 34)
                     { jjCheckNAddStates(514, 518); }
                  break;
               case 143:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 144:
                  if (curChar == 10)
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 145:
               case 148:
                  if (curChar == 13)
                     { jjCheckNAdd(144); }
                  break;
               case 146:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(519, 524); }
                  break;
               case 149:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(525, 533); }
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(534, 538); }
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(539, 544); }
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(545, 551); }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(552, 559); }
                  break;
               case 155:
                  if (curChar == 39)
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 156:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 157:
                  if (curChar == 39)
                     { jjCheckNAddStates(514, 518); }
                  break;
               case 159:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 160:
                  if (curChar == 10)
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 161:
               case 164:
                  if (curChar == 13)
                     { jjCheckNAdd(160); }
                  break;
               case 162:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(563, 568); }
                  break;
               case 165:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(569, 577); }
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(578, 582); }
                  break;
               case 168:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(583, 588); }
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(589, 595); }
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(596, 603); }
                  break;
               case 172:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(270, 275); }
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(604, 611); }
                  break;
               case 174:
                  if (curChar == 10)
                     { jjCheckNAddStates(270, 275); }
                  break;
               case 175:
               case 184:
                  if (curChar == 13)
                     { jjCheckNAdd(174); }
                  break;
               case 176:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(612, 620); }
                  break;
               case 177:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(621, 631); }
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(632, 638); }
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(639, 646); }
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(647, 655); }
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(656, 665); }
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(666, 673); }
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(674, 684); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(685, 691); }
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(692, 699); }
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(700, 708); }
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(709, 718); }
                  break;
               case 196:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 47)
                     { jjCheckNAddStates(719, 722); }
                  break;
               case 198:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(723, 727); }
                  break;
               case 199:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(200, 201); }
                  break;
               case 200:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(200, 201); }
                  break;
               case 201:
                  if (curChar == 42)
                     { jjCheckNAddStates(728, 730); }
                  break;
               case 202:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(203, 204); }
                  break;
               case 203:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(203, 204); }
                  break;
               case 204:
                  if (curChar == 42)
                     { jjCheckNAddStates(731, 733); }
                  break;
               case 205:
                  if (curChar == 47)
                     { jjCheckNAddStates(723, 727); }
                  break;
               case 206:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 207:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(208, 231); }
                  break;
               case 209:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(734, 737); }
                  break;
               case 210:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(738, 740); }
                  break;
               case 211:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(212, 213); }
                  break;
               case 212:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(212, 213); }
                  break;
               case 213:
                  if (curChar == 42)
                     { jjCheckNAddStates(741, 743); }
                  break;
               case 214:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(215, 216); }
                  break;
               case 215:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(215, 216); }
                  break;
               case 216:
                  if (curChar == 42)
                     { jjCheckNAddStates(744, 746); }
                  break;
               case 217:
                  if (curChar == 47)
                     { jjCheckNAddStates(738, 740); }
                  break;
               case 218:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 219:
                  if (curChar == 62 && kind > 103)
                     kind = 103;
                  break;
               case 221:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(734, 737); }
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(747, 752); }
                  break;
               case 223:
                  if (curChar == 10)
                     { jjCheckNAddStates(734, 737); }
                  break;
               case 224:
               case 233:
                  if (curChar == 13)
                     { jjCheckNAdd(223); }
                  break;
               case 225:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(753, 758); }
                  break;
               case 226:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(759, 767); }
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(768, 772); }
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(773, 778); }
                  break;
               case 229:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(779, 785); }
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(786, 793); }
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(794, 799); }
                  break;
               case 234:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(800, 808); }
                  break;
               case 235:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(809, 813); }
                  break;
               case 236:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(814, 819); }
                  break;
               case 237:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(820, 826); }
                  break;
               case 238:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(827, 834); }
                  break;
               case 239:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 240:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(101, 120); }
                  break;
               case 241:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(242, 243); }
                  break;
               case 242:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(242, 243); }
                  break;
               case 243:
                  if (curChar == 42)
                     { jjCheckNAddStates(835, 837); }
                  break;
               case 244:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(245, 246); }
                  break;
               case 245:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(245, 246); }
                  break;
               case 246:
                  if (curChar == 42)
                     { jjCheckNAddStates(838, 840); }
                  break;
               case 247:
                  if (curChar != 47)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(248, 249); }
                  break;
               case 248:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 249:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddTwoStates(248, 249); }
                  break;
               case 250:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(251, 252); }
                  break;
               case 251:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(251, 252); }
                  break;
               case 252:
                  if (curChar == 42)
                     { jjCheckNAddStates(841, 843); }
                  break;
               case 253:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(254, 255); }
                  break;
               case 254:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(254, 255); }
                  break;
               case 255:
                  if (curChar == 42)
                     { jjCheckNAddStates(844, 846); }
                  break;
               case 256:
                  if (curChar == 47)
                     { jjCheckNAddStates(847, 849); }
                  break;
               case 257:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 258:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(847, 849); }
                  break;
               case 260:
                  if (curChar == 61 && kind > 24)
                     kind = 24;
                  break;
               case 261:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(262, 263); }
                  break;
               case 262:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(262, 263); }
                  break;
               case 263:
                  if (curChar == 42)
                     { jjCheckNAddStates(850, 852); }
                  break;
               case 264:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(265, 266); }
                  break;
               case 265:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(265, 266); }
                  break;
               case 266:
                  if (curChar == 42)
                     { jjCheckNAddStates(853, 855); }
                  break;
               case 267:
                  if (curChar == 47)
                     { jjCheckNAddStates(856, 858); }
                  break;
               case 268:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 269:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(856, 858); }
                  break;
               case 270:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(271, 272); }
                  break;
               case 271:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(271, 272); }
                  break;
               case 272:
                  if (curChar == 42)
                     { jjCheckNAddStates(859, 861); }
                  break;
               case 273:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(274, 275); }
                  break;
               case 274:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(274, 275); }
                  break;
               case 275:
                  if (curChar == 42)
                     { jjCheckNAddStates(862, 864); }
                  break;
               case 276:
                  if (curChar == 47)
                     { jjCheckNAddStates(865, 867); }
                  break;
               case 277:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 278:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(865, 867); }
                  break;
               case 279:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(280, 281); }
                  break;
               case 280:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(280, 281); }
                  break;
               case 281:
                  if (curChar == 42)
                     { jjCheckNAddStates(868, 870); }
                  break;
               case 282:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(283, 284); }
                  break;
               case 283:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(283, 284); }
                  break;
               case 284:
                  if (curChar == 42)
                     { jjCheckNAddStates(871, 873); }
                  break;
               case 285:
                  if (curChar == 47)
                     { jjCheckNAddStates(874, 876); }
                  break;
               case 286:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 287:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(874, 876); }
                  break;
               case 288:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(289, 290); }
                  break;
               case 289:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(289, 290); }
                  break;
               case 290:
                  if (curChar == 42)
                     { jjCheckNAddStates(877, 879); }
                  break;
               case 291:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(292, 293); }
                  break;
               case 292:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(292, 293); }
                  break;
               case 293:
                  if (curChar == 42)
                     { jjCheckNAddStates(880, 882); }
                  break;
               case 294:
                  if (curChar == 47)
                     { jjCheckNAddStates(883, 885); }
                  break;
               case 295:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 296:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(883, 885); }
                  break;
               case 297:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(298, 299); }
                  break;
               case 298:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(298, 299); }
                  break;
               case 299:
                  if (curChar == 42)
                     { jjCheckNAddStates(886, 888); }
                  break;
               case 300:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(301, 302); }
                  break;
               case 301:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(301, 302); }
                  break;
               case 302:
                  if (curChar == 42)
                     { jjCheckNAddStates(889, 891); }
                  break;
               case 303:
                  if (curChar == 47)
                     { jjCheckNAddStates(892, 894); }
                  break;
               case 304:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 305:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(892, 894); }
                  break;
               case 308:
                  if (curChar != 34)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(162, 166); }
                  break;
               case 309:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(895, 897); }
                  break;
               case 310:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 312:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(895, 897); }
                  break;
               case 313:
                  if (curChar == 10)
                     { jjCheckNAddStates(895, 897); }
                  break;
               case 314:
               case 317:
                  if (curChar == 13)
                     { jjCheckNAdd(313); }
                  break;
               case 315:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(895, 897); }
                  break;
               case 316:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(898, 903); }
                  break;
               case 318:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(895, 897); }
                  break;
               case 319:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(904, 912); }
                  break;
               case 320:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(913, 917); }
                  break;
               case 321:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(918, 923); }
                  break;
               case 322:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(924, 930); }
                  break;
               case 323:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(931, 938); }
                  break;
               case 324:
                  if ((0xfffffffbffffcbffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 326:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 327:
                  if (curChar != 10)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 328:
               case 331:
                  if (curChar == 13)
                     { jjCheckNAdd(327); }
                  break;
               case 329:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 330:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(939, 943); }
                  break;
               case 332:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 333:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(944, 951); }
                  break;
               case 334:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(952, 955); }
                  break;
               case 335:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(956, 960); }
                  break;
               case 336:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(961, 966); }
                  break;
               case 337:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(967, 973); }
                  break;
               case 338:
                  if (curChar != 39)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(157, 161); }
                  break;
               case 339:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(974, 976); }
                  break;
               case 340:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 342:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(974, 976); }
                  break;
               case 343:
                  if (curChar == 10)
                     { jjCheckNAddStates(974, 976); }
                  break;
               case 344:
               case 347:
                  if (curChar == 13)
                     { jjCheckNAdd(343); }
                  break;
               case 345:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(974, 976); }
                  break;
               case 346:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(977, 982); }
                  break;
               case 348:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(974, 976); }
                  break;
               case 349:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(983, 991); }
                  break;
               case 350:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(992, 996); }
                  break;
               case 351:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(997, 1002); }
                  break;
               case 352:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1003, 1009); }
                  break;
               case 353:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1010, 1017); }
                  break;
               case 354:
                  if ((0xffffff7fffffcbffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(354, 355); }
                  break;
               case 356:
                  if ((0x3400L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(354, 355); }
                  break;
               case 357:
                  if (curChar != 10)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(354, 355); }
                  break;
               case 358:
               case 361:
                  if (curChar == 13)
                     { jjCheckNAdd(357); }
                  break;
               case 359:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(354, 355); }
                  break;
               case 360:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1018, 1022); }
                  break;
               case 362:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(354, 355); }
                  break;
               case 363:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1023, 1030); }
                  break;
               case 364:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1031, 1034); }
                  break;
               case 365:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1035, 1039); }
                  break;
               case 366:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1040, 1045); }
                  break;
               case 367:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1046, 1052); }
                  break;
               case 368:
                  if (curChar == 45)
                     { jjAddStates(153, 156); }
                  break;
               case 370:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 372:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 373:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1053, 1057); }
                  break;
               case 374:
                  if (curChar != 10)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 375:
               case 406:
                  if (curChar == 13)
                     { jjCheckNAdd(374); }
                  break;
               case 376:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 377:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1058, 1065); }
                  break;
               case 378:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1066, 1069); }
                  break;
               case 379:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1070, 1074); }
                  break;
               case 380:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1075, 1080); }
                  break;
               case 381:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1081, 1087); }
                  break;
               case 383:
                  if ((0x3ff200000000000L & l) != 0L)
                     { jjCheckNAddStates(1088, 1090); }
                  break;
               case 384:
                  if (curChar == 40 && kind > 101)
                     kind = 101;
                  break;
               case 386:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1088, 1090); }
                  break;
               case 387:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1091, 1096); }
                  break;
               case 388:
                  if (curChar == 10)
                     { jjCheckNAddStates(1088, 1090); }
                  break;
               case 389:
               case 398:
                  if (curChar == 13)
                     { jjCheckNAdd(388); }
                  break;
               case 390:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1088, 1090); }
                  break;
               case 391:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1097, 1105); }
                  break;
               case 392:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1106, 1110); }
                  break;
               case 393:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1111, 1116); }
                  break;
               case 394:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1117, 1123); }
                  break;
               case 395:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1124, 1131); }
                  break;
               case 397:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1132, 1137); }
                  break;
               case 399:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1138, 1146); }
                  break;
               case 400:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1147, 1151); }
                  break;
               case 401:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1152, 1157); }
                  break;
               case 402:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1158, 1164); }
                  break;
               case 403:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1165, 1172); }
                  break;
               case 405:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1173, 1177); }
                  break;
               case 407:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1178, 1185); }
                  break;
               case 408:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1186, 1189); }
                  break;
               case 409:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1190, 1194); }
                  break;
               case 410:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1195, 1200); }
                  break;
               case 411:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1201, 1207); }
                  break;
               case 413:
                  if (curChar == 35)
                     { jjCheckNAddStates(148, 152); }
                  break;
               case 414:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(415, 428); }
                  break;
               case 416:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 418:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 419:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1208, 1212); }
                  break;
               case 420:
                  if (curChar != 10)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 421:
               case 430:
                  if (curChar == 13)
                     { jjCheckNAdd(420); }
                  break;
               case 422:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 423:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1213, 1220); }
                  break;
               case 424:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1221, 1224); }
                  break;
               case 425:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1225, 1229); }
                  break;
               case 426:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1230, 1235); }
                  break;
               case 427:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1236, 1242); }
                  break;
               case 429:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1243, 1247); }
                  break;
               case 431:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1248, 1255); }
                  break;
               case 432:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1256, 1259); }
                  break;
               case 433:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1260, 1264); }
                  break;
               case 434:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1265, 1270); }
                  break;
               case 435:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1271, 1277); }
                  break;
               case 436:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(436, 437); }
                  break;
               case 438:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(436, 437); }
                  break;
               case 439:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1278, 1282); }
                  break;
               case 440:
                  if (curChar != 10)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(436, 437); }
                  break;
               case 441:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 440;
                  break;
               case 442:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(436, 437); }
                  break;
               case 443:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1283, 1290); }
                  break;
               case 444:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1291, 1294); }
                  break;
               case 445:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1295, 1299); }
                  break;
               case 446:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1300, 1305); }
                  break;
               case 447:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1306, 1312); }
                  break;
               case 449:
                  if (curChar == 40)
                     { jjCheckNAddStates(1313, 1318); }
                  break;
               case 450:
                  if (curChar == 34)
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 451:
                  if ((0xfffffffbffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 452:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(453, 462); }
                  break;
               case 453:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1322, 1324); }
                  break;
               case 454:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(455, 456); }
                  break;
               case 455:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(455, 456); }
                  break;
               case 456:
                  if (curChar == 42)
                     { jjCheckNAddStates(1325, 1327); }
                  break;
               case 457:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(458, 459); }
                  break;
               case 458:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(458, 459); }
                  break;
               case 459:
                  if (curChar == 42)
                     { jjCheckNAddStates(1328, 1330); }
                  break;
               case 460:
                  if (curChar == 47)
                     { jjCheckNAddStates(1322, 1324); }
                  break;
               case 461:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 454;
                  break;
               case 462:
                  if (curChar == 41 && kind > 54)
                     kind = 54;
                  break;
               case 464:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 465:
                  if (curChar == 10)
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 466:
               case 469:
                  if (curChar == 13)
                     { jjCheckNAdd(465); }
                  break;
               case 467:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 468:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1331, 1336); }
                  break;
               case 470:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 471:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1337, 1345); }
                  break;
               case 472:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1346, 1350); }
                  break;
               case 473:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1351, 1356); }
                  break;
               case 474:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1357, 1363); }
                  break;
               case 475:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1364, 1371); }
                  break;
               case 476:
                  if (curChar == 39)
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 477:
                  if ((0xffffff7fffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 478:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(453, 462); }
                  break;
               case 480:
                  if ((0x3400L & l) != 0L)
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 481:
                  if (curChar == 10)
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 482:
               case 485:
                  if (curChar == 13)
                     { jjCheckNAdd(481); }
                  break;
               case 483:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 484:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1375, 1380); }
                  break;
               case 486:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 487:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1381, 1389); }
                  break;
               case 488:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1390, 1394); }
                  break;
               case 489:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1395, 1400); }
                  break;
               case 490:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1401, 1407); }
                  break;
               case 491:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1408, 1415); }
                  break;
               case 492:
                  if ((0xfffffc7a00000000L & l) != 0L)
                     { jjCheckNAddStates(1416, 1419); }
                  break;
               case 494:
                  if ((0xfc00ffffffffcbffL & l) != 0L)
                     { jjCheckNAddStates(1416, 1419); }
                  break;
               case 495:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1420, 1425); }
                  break;
               case 496:
                  if (curChar == 10)
                     { jjCheckNAddStates(1416, 1419); }
                  break;
               case 497:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 496;
                  break;
               case 498:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1426, 1431); }
                  break;
               case 499:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1432, 1440); }
                  break;
               case 500:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1441, 1445); }
                  break;
               case 501:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1446, 1451); }
                  break;
               case 502:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1452, 1458); }
                  break;
               case 503:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1459, 1466); }
                  break;
               case 504:
                  if ((0x100003600L & l) != 0L)
                     { jjCheckNAddStates(1467, 1475); }
                  break;
               case 505:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(506, 507); }
                  break;
               case 506:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(506, 507); }
                  break;
               case 507:
                  if (curChar == 42)
                     { jjCheckNAddStates(1476, 1478); }
                  break;
               case 508:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(509, 510); }
                  break;
               case 509:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(509, 510); }
                  break;
               case 510:
                  if (curChar == 42)
                     { jjCheckNAddStates(1479, 1481); }
                  break;
               case 511:
                  if (curChar == 47)
                     { jjCheckNAddStates(1482, 1488); }
                  break;
               case 512:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 505;
                  break;
               case 515:
                  if (curChar == 43)
                     { jjAddStates(1489, 1490); }
                  break;
               case 516:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 517;
                  break;
               case 517:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1491, 1494); }
                  break;
               case 518:
                  if (curChar == 63 && kind > 95)
                     kind = 95;
                  break;
               case 519:
               case 535:
               case 539:
               case 542:
               case 545:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(518); }
                  break;
               case 520:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddTwoStates(518, 519); }
                  break;
               case 521:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1495, 1497); }
                  break;
               case 522:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjAddStates(1498, 1503); }
                  break;
               case 523:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 524;
                  break;
               case 524:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 525;
                  break;
               case 525:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 526;
                  break;
               case 526:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(527); }
                  break;
               case 527:
                  if ((0x3ff000000000000L & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 528:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 529;
                  break;
               case 529:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 530;
                  break;
               case 530:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 531;
                  break;
               case 531:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(518); }
                  break;
               case 532:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 533;
                  break;
               case 533:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 534;
                  break;
               case 534:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 535;
                  break;
               case 536:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 537;
                  break;
               case 537:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 538;
                  break;
               case 538:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddTwoStates(518, 539); }
                  break;
               case 540:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 541;
                  break;
               case 541:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1504, 1506); }
                  break;
               case 543:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddTwoStates(518, 542); }
                  break;
               case 544:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1507, 1510); }
                  break;
               case 546:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddTwoStates(518, 545); }
                  break;
               case 547:
                  if (curChar != 63)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1511, 1513); }
                  break;
               case 548:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 549;
                  break;
               case 549:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(550, 556); }
                  break;
               case 550:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 551;
                  break;
               case 551:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 552;
                  break;
               case 552:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1514, 1517); }
                  break;
               case 553:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(527); }
                  break;
               case 554:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddTwoStates(527, 553); }
                  break;
               case 555:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1518, 1520); }
                  break;
               case 556:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1521, 1525); }
                  break;
               case 557:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(550); }
                  break;
               case 558:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(557, 550); }
                  break;
               case 559:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1526, 1528); }
                  break;
               case 560:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1529, 1532); }
                  break;
               case 561:
                  if (curChar == 46)
                     { jjCheckNAddStates(121, 147); }
                  break;
               case 562:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(562, 564); }
                  break;
               case 565:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(565, 567); }
                  break;
               case 568:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(568, 570); }
                  break;
               case 571:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(571, 573); }
                  break;
               case 574:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(574, 576); }
                  break;
               case 577:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(577, 579); }
                  break;
               case 580:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(580, 584); }
                  break;
               case 585:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(585, 589); }
                  break;
               case 590:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(590, 592); }
                  break;
               case 593:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(593, 594); }
                  break;
               case 595:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(595, 596); }
                  break;
               case 597:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(597, 599); }
                  break;
               case 600:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(600, 602); }
                  break;
               case 603:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(603, 605); }
                  break;
               case 606:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(606, 608); }
                  break;
               case 609:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1533, 1537); }
                  break;
               case 623:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(623, 625); }
                  break;
               case 626:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(626, 628); }
                  break;
               case 629:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1538, 1540); }
                  break;
               case 633:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1541, 1543); }
                  break;
               case 638:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(638, 639); }
                  break;
               case 648:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1544, 1546); }
                  break;
               case 650:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddTwoStates(650, 651); }
                  break;
               case 652:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddTwoStates(650, 651); }
                  break;
               case 653:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1547, 1551); }
                  break;
               case 654:
                  if (curChar != 10)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddTwoStates(650, 651); }
                  break;
               case 655:
               case 664:
                  if (curChar == 13)
                     { jjCheckNAdd(654); }
                  break;
               case 656:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddTwoStates(650, 651); }
                  break;
               case 657:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1552, 1559); }
                  break;
               case 658:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1560, 1563); }
                  break;
               case 659:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1564, 1568); }
                  break;
               case 660:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1569, 1574); }
                  break;
               case 661:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1575, 1581); }
                  break;
               case 663:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1582, 1586); }
                  break;
               case 665:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1587, 1594); }
                  break;
               case 666:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1595, 1598); }
                  break;
               case 667:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1599, 1603); }
                  break;
               case 668:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1604, 1609); }
                  break;
               case 669:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1610, 1616); }
                  break;
               case 670:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(670, 671); }
                  break;
               case 671:
                  if (curChar == 37 && kind > 65)
                     kind = 65;
                  break;
               case 672:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(672); }
                  break;
               case 673:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(674, 687); }
                  break;
               case 675:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(675, 676); }
                  break;
               case 677:
                  if ((0xfc00ffffffffcbffL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(675, 676); }
                  break;
               case 678:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1617, 1621); }
                  break;
               case 679:
                  if (curChar != 10)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(675, 676); }
                  break;
               case 680:
               case 689:
                  if (curChar == 13)
                     { jjCheckNAdd(679); }
                  break;
               case 681:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(675, 676); }
                  break;
               case 682:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1622, 1629); }
                  break;
               case 683:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1630, 1633); }
                  break;
               case 684:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1634, 1638); }
                  break;
               case 685:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1639, 1644); }
                  break;
               case 686:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1645, 1651); }
                  break;
               case 688:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1652, 1656); }
                  break;
               case 690:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1657, 1664); }
                  break;
               case 691:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1665, 1668); }
                  break;
               case 692:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1669, 1673); }
                  break;
               case 693:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1674, 1679); }
                  break;
               case 694:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1680, 1686); }
                  break;
               case 696:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(0, 100); }
                  break;
               case 697:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(697, 564); }
                  break;
               case 698:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(698, 699); }
                  break;
               case 699:
                  if (curChar == 46)
                     { jjCheckNAdd(562); }
                  break;
               case 700:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(700, 567); }
                  break;
               case 701:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(701, 702); }
                  break;
               case 702:
                  if (curChar == 46)
                     { jjCheckNAdd(565); }
                  break;
               case 703:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(703, 570); }
                  break;
               case 704:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(704, 705); }
                  break;
               case 705:
                  if (curChar == 46)
                     { jjCheckNAdd(568); }
                  break;
               case 706:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(706, 573); }
                  break;
               case 707:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(707, 708); }
                  break;
               case 708:
                  if (curChar == 46)
                     { jjCheckNAdd(571); }
                  break;
               case 709:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(709, 576); }
                  break;
               case 710:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(710, 711); }
                  break;
               case 711:
                  if (curChar == 46)
                     { jjCheckNAdd(574); }
                  break;
               case 712:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(712, 579); }
                  break;
               case 713:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(713, 714); }
                  break;
               case 714:
                  if (curChar == 46)
                     { jjCheckNAdd(577); }
                  break;
               case 715:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(715, 584); }
                  break;
               case 716:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(716, 717); }
                  break;
               case 717:
                  if (curChar == 46)
                     { jjCheckNAdd(580); }
                  break;
               case 718:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(718, 589); }
                  break;
               case 719:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(719, 720); }
                  break;
               case 720:
                  if (curChar == 46)
                     { jjCheckNAdd(585); }
                  break;
               case 721:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(721, 592); }
                  break;
               case 722:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(722, 723); }
                  break;
               case 723:
                  if (curChar == 46)
                     { jjCheckNAdd(590); }
                  break;
               case 724:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(724, 594); }
                  break;
               case 725:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(725, 726); }
                  break;
               case 726:
                  if (curChar == 46)
                     { jjCheckNAdd(593); }
                  break;
               case 727:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(727, 596); }
                  break;
               case 728:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(728, 729); }
                  break;
               case 729:
                  if (curChar == 46)
                     { jjCheckNAdd(595); }
                  break;
               case 730:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(730, 599); }
                  break;
               case 731:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(731, 732); }
                  break;
               case 732:
                  if (curChar == 46)
                     { jjCheckNAdd(597); }
                  break;
               case 733:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(733, 602); }
                  break;
               case 734:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(734, 735); }
                  break;
               case 735:
                  if (curChar == 46)
                     { jjCheckNAdd(600); }
                  break;
               case 736:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(736, 605); }
                  break;
               case 737:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(737, 738); }
                  break;
               case 738:
                  if (curChar == 46)
                     { jjCheckNAdd(603); }
                  break;
               case 739:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(739, 608); }
                  break;
               case 740:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(740, 741); }
                  break;
               case 741:
                  if (curChar == 46)
                     { jjCheckNAdd(606); }
                  break;
               case 742:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1687, 1691); }
                  break;
               case 743:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(743, 744); }
                  break;
               case 744:
                  if (curChar == 46)
                     { jjCheckNAdd(609); }
                  break;
               case 745:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(745, 625); }
                  break;
               case 746:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(746, 747); }
                  break;
               case 747:
                  if (curChar == 46)
                     { jjCheckNAdd(623); }
                  break;
               case 748:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(748, 628); }
                  break;
               case 749:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(749, 750); }
                  break;
               case 750:
                  if (curChar == 46)
                     { jjCheckNAdd(626); }
                  break;
               case 751:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1692, 1694); }
                  break;
               case 752:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(752, 753); }
                  break;
               case 753:
                  if (curChar == 46)
                     { jjCheckNAdd(629); }
                  break;
               case 754:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1695, 1697); }
                  break;
               case 755:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(755, 756); }
                  break;
               case 756:
                  if (curChar == 46)
                     { jjCheckNAdd(633); }
                  break;
               case 757:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(757, 639); }
                  break;
               case 758:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(758, 759); }
                  break;
               case 759:
                  if (curChar == 46)
                     { jjCheckNAdd(638); }
                  break;
               case 760:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(1698, 1700); }
                  break;
               case 761:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(761, 762); }
                  break;
               case 762:
                  if (curChar == 46)
                     { jjCheckNAdd(648); }
                  break;
               case 763:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(763, 671); }
                  break;
               case 764:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(764, 765); }
                  break;
               case 765:
                  if (curChar == 46)
                     { jjCheckNAdd(670); }
                  break;
               case 766:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(766); }
                  break;
               case 767:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(767, 768); }
                  break;
               case 768:
                  if (curChar == 46)
                     { jjCheckNAdd(672); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     { jjCheckNAddStates(1701, 1705); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(1706, 1709); }
                  else if (curChar == 126)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAdd(260); }
                  }
                  else if (curChar == 64)
                     { jjAddStates(1710, 1712); }
                  else if (curChar == 123)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(1713, 1715); }
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 1:
                  { jjAddStates(1716, 1717); }
                  break;
               case 3:
               case 4:
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 8:
                  if (curChar == 123 && kind > 26)
                     kind = 26;
                  break;
               case 12:
                  if ((0x200000002000000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 13:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x10000000100000L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 17:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 22:
                  { jjAddStates(1718, 1719); }
                  break;
               case 24:
               case 25:
                  { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 29:
                  if ((0x10000000100000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 30:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 64)
                     { jjAddStates(1710, 1712); }
                  break;
               case 40:
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 42:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 43:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 44:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(189, 193); }
                  break;
               case 48:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(194, 201); }
                  break;
               case 49:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(202, 205); }
                  break;
               case 50:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(206, 210); }
                  break;
               case 51:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(211, 216); }
                  break;
               case 52:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(217, 223); }
                  break;
               case 53:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(43, 54); }
                  break;
               case 54:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(224, 228); }
                  break;
               case 56:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(229, 236); }
                  break;
               case 57:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(237, 240); }
                  break;
               case 58:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(241, 245); }
                  break;
               case 59:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(246, 251); }
                  break;
               case 60:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddStates(252, 258); }
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(1720, 1723); }
                  break;
               case 65:
                  { jjAddStates(1724, 1725); }
                  break;
               case 67:
               case 68:
                  { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 73:
               case 74:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(270, 275); }
                  break;
               case 77:
                  { jjAddStates(1726, 1727); }
                  break;
               case 79:
               case 80:
                  { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 85:
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(288, 290); }
                  break;
               case 89:
               case 90:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(296, 301); }
                  break;
               case 93:
                  { jjAddStates(1728, 1729); }
                  break;
               case 95:
               case 96:
                  { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 101:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(102, 113); }
                  break;
               case 102:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(288, 290); }
                  break;
               case 103:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(102, 104); }
                  break;
               case 104:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(314, 319); }
                  break;
               case 108:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(320, 328); }
                  break;
               case 109:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(329, 333); }
                  break;
               case 110:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(334, 339); }
                  break;
               case 111:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(340, 346); }
                  break;
               case 112:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(347, 354); }
                  break;
               case 113:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(355, 360); }
                  break;
               case 115:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(361, 369); }
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(370, 374); }
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(375, 380); }
                  break;
               case 118:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(381, 387); }
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(388, 395); }
                  break;
               case 120:
                  if (curChar == 92)
                     { jjCheckNAddStates(1730, 1733); }
                  break;
               case 121:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(296, 301); }
                  break;
               case 122:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(396, 403); }
                  break;
               case 126:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(413, 423); }
                  break;
               case 127:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(424, 430); }
                  break;
               case 128:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(431, 438); }
                  break;
               case 129:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(439, 447); }
                  break;
               case 130:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(448, 457); }
                  break;
               case 131:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(121, 132); }
                  break;
               case 132:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(458, 465); }
                  break;
               case 134:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(466, 476); }
                  break;
               case 135:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(477, 483); }
                  break;
               case 136:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(484, 491); }
                  break;
               case 137:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(492, 500); }
                  break;
               case 138:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(501, 510); }
                  break;
               case 140:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 142:
                  if (curChar == 92)
                     { jjAddStates(1734, 1737); }
                  break;
               case 146:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 147:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(519, 524); }
                  break;
               case 150:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(525, 533); }
                  break;
               case 151:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(534, 538); }
                  break;
               case 152:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(539, 544); }
                  break;
               case 153:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(545, 551); }
                  break;
               case 154:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(552, 559); }
                  break;
               case 156:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 158:
                  if (curChar == 92)
                     { jjAddStates(1738, 1741); }
                  break;
               case 162:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 163:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(563, 568); }
                  break;
               case 166:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(569, 577); }
                  break;
               case 167:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(578, 582); }
                  break;
               case 168:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(583, 588); }
                  break;
               case 169:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(589, 595); }
                  break;
               case 170:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(596, 603); }
                  break;
               case 171:
                  if (curChar == 92)
                     { jjCheckNAddStates(1742, 1745); }
                  break;
               case 172:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(270, 275); }
                  break;
               case 173:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(604, 611); }
                  break;
               case 177:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(621, 631); }
                  break;
               case 178:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(632, 638); }
                  break;
               case 179:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(639, 646); }
                  break;
               case 180:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(647, 655); }
                  break;
               case 181:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(656, 665); }
                  break;
               case 182:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(172, 183); }
                  break;
               case 183:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(666, 673); }
                  break;
               case 185:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(674, 684); }
                  break;
               case 186:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(685, 691); }
                  break;
               case 187:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(692, 699); }
                  break;
               case 188:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(700, 708); }
                  break;
               case 189:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(709, 718); }
                  break;
               case 190:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 191:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 200:
                  { jjAddStates(1746, 1747); }
                  break;
               case 202:
               case 203:
                  { jjCheckNAddTwoStates(203, 204); }
                  break;
               case 208:
               case 209:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(734, 737); }
                  break;
               case 212:
                  { jjAddStates(1748, 1749); }
                  break;
               case 214:
               case 215:
                  { jjCheckNAddTwoStates(215, 216); }
                  break;
               case 220:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(221, 222); }
                  break;
               case 221:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(734, 737); }
                  break;
               case 222:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(747, 752); }
                  break;
               case 226:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(759, 767); }
                  break;
               case 227:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(768, 772); }
                  break;
               case 228:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(773, 778); }
                  break;
               case 229:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(779, 785); }
                  break;
               case 230:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(786, 793); }
                  break;
               case 231:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(221, 232); }
                  break;
               case 232:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(794, 799); }
                  break;
               case 234:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(800, 808); }
                  break;
               case 235:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(809, 813); }
                  break;
               case 236:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(814, 819); }
                  break;
               case 237:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(820, 826); }
                  break;
               case 238:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(827, 834); }
                  break;
               case 242:
                  { jjAddStates(1750, 1751); }
                  break;
               case 244:
               case 245:
                  { jjCheckNAddTwoStates(245, 246); }
                  break;
               case 251:
                  { jjAddStates(1752, 1753); }
                  break;
               case 253:
               case 254:
                  { jjCheckNAddTwoStates(254, 255); }
                  break;
               case 259:
                  if (curChar == 126)
                     { jjCheckNAdd(260); }
                  break;
               case 262:
                  { jjAddStates(1754, 1755); }
                  break;
               case 264:
               case 265:
                  { jjCheckNAddTwoStates(265, 266); }
                  break;
               case 271:
                  { jjAddStates(1756, 1757); }
                  break;
               case 273:
               case 274:
                  { jjCheckNAddTwoStates(274, 275); }
                  break;
               case 280:
                  { jjAddStates(1758, 1759); }
                  break;
               case 282:
               case 283:
                  { jjCheckNAddTwoStates(283, 284); }
                  break;
               case 289:
                  { jjAddStates(1760, 1761); }
                  break;
               case 291:
               case 292:
                  { jjCheckNAddTwoStates(292, 293); }
                  break;
               case 298:
                  { jjAddStates(1762, 1763); }
                  break;
               case 300:
               case 301:
                  { jjCheckNAddTwoStates(301, 302); }
                  break;
               case 306:
                  if (curChar == 126 && kind > 31)
                     kind = 31;
                  break;
               case 307:
                  if (curChar != 126)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAdd(260); }
                  break;
               case 309:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(895, 897); }
                  break;
               case 311:
                  if (curChar == 92)
                     { jjAddStates(1764, 1767); }
                  break;
               case 315:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(895, 897); }
                  break;
               case 316:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(898, 903); }
                  break;
               case 319:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(904, 912); }
                  break;
               case 320:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(913, 917); }
                  break;
               case 321:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(918, 923); }
                  break;
               case 322:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(924, 930); }
                  break;
               case 323:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(931, 938); }
                  break;
               case 324:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 325:
                  if (curChar == 92)
                     { jjAddStates(1768, 1771); }
                  break;
               case 329:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 330:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(939, 943); }
                  break;
               case 333:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(944, 951); }
                  break;
               case 334:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(952, 955); }
                  break;
               case 335:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(956, 960); }
                  break;
               case 336:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(961, 966); }
                  break;
               case 337:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(967, 973); }
                  break;
               case 339:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(974, 976); }
                  break;
               case 341:
                  if (curChar == 92)
                     { jjAddStates(1772, 1775); }
                  break;
               case 345:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(974, 976); }
                  break;
               case 346:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(977, 982); }
                  break;
               case 349:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(983, 991); }
                  break;
               case 350:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(992, 996); }
                  break;
               case 351:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(997, 1002); }
                  break;
               case 352:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1003, 1009); }
                  break;
               case 353:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1010, 1017); }
                  break;
               case 354:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(354, 355); }
                  break;
               case 355:
                  if (curChar == 92)
                     { jjAddStates(1776, 1779); }
                  break;
               case 359:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(354, 355); }
                  break;
               case 360:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1018, 1022); }
                  break;
               case 363:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1023, 1030); }
                  break;
               case 364:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1031, 1034); }
                  break;
               case 365:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1035, 1039); }
                  break;
               case 366:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1040, 1045); }
                  break;
               case 367:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddStates(1046, 1052); }
                  break;
               case 369:
               case 370:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 371:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(372, 373); }
                  break;
               case 372:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 373:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1053, 1057); }
                  break;
               case 377:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1058, 1065); }
                  break;
               case 378:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1066, 1069); }
                  break;
               case 379:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1070, 1074); }
                  break;
               case 380:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1075, 1080); }
                  break;
               case 381:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1081, 1087); }
                  break;
               case 382:
               case 383:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(1088, 1090); }
                  break;
               case 385:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(386, 387); }
                  break;
               case 386:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1088, 1090); }
                  break;
               case 387:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1091, 1096); }
                  break;
               case 391:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1097, 1105); }
                  break;
               case 392:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1106, 1110); }
                  break;
               case 393:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1111, 1116); }
                  break;
               case 394:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1117, 1123); }
                  break;
               case 395:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1124, 1131); }
                  break;
               case 396:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(386, 397); }
                  break;
               case 397:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1132, 1137); }
                  break;
               case 399:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1138, 1146); }
                  break;
               case 400:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1147, 1151); }
                  break;
               case 401:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1152, 1157); }
                  break;
               case 402:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1158, 1164); }
                  break;
               case 403:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1165, 1172); }
                  break;
               case 404:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(372, 405); }
                  break;
               case 405:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1173, 1177); }
                  break;
               case 407:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1178, 1185); }
                  break;
               case 408:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1186, 1189); }
                  break;
               case 409:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1190, 1194); }
                  break;
               case 410:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1195, 1200); }
                  break;
               case 411:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1201, 1207); }
                  break;
               case 412:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1701, 1705); }
                  break;
               case 415:
               case 416:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 417:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(418, 419); }
                  break;
               case 418:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 419:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1208, 1212); }
                  break;
               case 423:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1213, 1220); }
                  break;
               case 424:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1221, 1224); }
                  break;
               case 425:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1225, 1229); }
                  break;
               case 426:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1230, 1235); }
                  break;
               case 427:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1236, 1242); }
                  break;
               case 428:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(418, 429); }
                  break;
               case 429:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1243, 1247); }
                  break;
               case 431:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1248, 1255); }
                  break;
               case 432:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1256, 1259); }
                  break;
               case 433:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1260, 1264); }
                  break;
               case 434:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1265, 1270); }
                  break;
               case 435:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(1271, 1277); }
                  break;
               case 436:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(436, 437); }
                  break;
               case 437:
                  if (curChar == 92)
                     { jjAddStates(1780, 1781); }
                  break;
               case 438:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(436, 437); }
                  break;
               case 439:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1278, 1282); }
                  break;
               case 443:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1283, 1290); }
                  break;
               case 444:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1291, 1294); }
                  break;
               case 445:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1295, 1299); }
                  break;
               case 446:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1300, 1305); }
                  break;
               case 447:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddStates(1306, 1312); }
                  break;
               case 448:
                  if ((0x20000000200000L & l) != 0L)
                     { jjAddStates(1713, 1715); }
                  break;
               case 451:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 455:
                  { jjAddStates(1782, 1783); }
                  break;
               case 457:
               case 458:
                  { jjCheckNAddTwoStates(458, 459); }
                  break;
               case 463:
                  if (curChar == 92)
                     { jjAddStates(1784, 1787); }
                  break;
               case 467:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 468:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1331, 1336); }
                  break;
               case 471:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1337, 1345); }
                  break;
               case 472:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1346, 1350); }
                  break;
               case 473:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1351, 1356); }
                  break;
               case 474:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1357, 1363); }
                  break;
               case 475:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1364, 1371); }
                  break;
               case 477:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 479:
                  if (curChar == 92)
                     { jjAddStates(1788, 1791); }
                  break;
               case 483:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 484:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1375, 1380); }
                  break;
               case 487:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1381, 1389); }
                  break;
               case 488:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1390, 1394); }
                  break;
               case 489:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1395, 1400); }
                  break;
               case 490:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1401, 1407); }
                  break;
               case 491:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1408, 1415); }
                  break;
               case 492:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(1416, 1419); }
                  break;
               case 493:
                  if (curChar == 92)
                     { jjAddStates(1792, 1793); }
                  break;
               case 494:
                  if ((0xffffff81ffffff81L & l) != 0L)
                     { jjCheckNAddStates(1416, 1419); }
                  break;
               case 495:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1420, 1425); }
                  break;
               case 499:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1432, 1440); }
                  break;
               case 500:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1441, 1445); }
                  break;
               case 501:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1446, 1451); }
                  break;
               case 502:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1452, 1458); }
                  break;
               case 503:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1459, 1466); }
                  break;
               case 506:
                  { jjAddStates(1794, 1795); }
                  break;
               case 508:
               case 509:
                  { jjCheckNAddTwoStates(509, 510); }
                  break;
               case 513:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 449;
                  break;
               case 514:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 513;
                  break;
               case 522:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjAddStates(1498, 1503); }
                  break;
               case 523:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 524;
                  break;
               case 524:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 525;
                  break;
               case 525:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 526;
                  break;
               case 526:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(527); }
                  break;
               case 527:
                  if ((0x7e0000007eL & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 528:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 529;
                  break;
               case 529:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 530;
                  break;
               case 530:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 531;
                  break;
               case 531:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 518;
                  break;
               case 532:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 533;
                  break;
               case 533:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 534;
                  break;
               case 534:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 535;
                  break;
               case 536:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 537;
                  break;
               case 537:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 538;
                  break;
               case 540:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 541;
                  break;
               case 549:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(550, 556); }
                  break;
               case 551:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjstateSet[jjnewStateCnt++] = 552;
                  break;
               case 552:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1514, 1517); }
                  break;
               case 553:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(527); }
                  break;
               case 554:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddTwoStates(527, 553); }
                  break;
               case 555:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(1518, 1520); }
                  break;
               case 556:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1521, 1525); }
                  break;
               case 557:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(550); }
                  break;
               case 558:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(557, 550); }
                  break;
               case 559:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1526, 1528); }
                  break;
               case 560:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(1529, 1532); }
                  break;
               case 563:
                  if ((0x200000002000L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 564:
               case 572:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAdd(563); }
                  break;
               case 566:
                  if ((0x100000001000000L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 567:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 566;
                  break;
               case 569:
                  if ((0x10000000100L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 570:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 569;
                  break;
               case 573:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 572;
                  break;
               case 575:
                  if ((0x80000000800000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 576:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 575;
                  break;
               case 578:
                  if ((0x10000000100L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 579:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 578;
                  break;
               case 581:
                  if ((0x400000004000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 582:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 581;
                  break;
               case 583:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 582;
                  break;
               case 584:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 583;
                  break;
               case 586:
                  if ((0x100000001000000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 587:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 586;
                  break;
               case 588:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 587;
                  break;
               case 589:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 588;
                  break;
               case 591:
                  if ((0x200000002000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 592:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAdd(591); }
                  break;
               case 594:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(591); }
                  break;
               case 596:
                  if ((0x2000000020000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 598:
                  if ((0x400000004000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 599:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 598;
                  break;
               case 601:
                  if ((0x10000000100000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 602:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 601;
                  break;
               case 604:
                  if ((0x800000008L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 605:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 604;
                  break;
               case 607:
                  if ((0x100000001000000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               case 608:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 607;
                  break;
               case 610:
                  if ((0x8000000080L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 611:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 610;
                  break;
               case 612:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 611;
                  break;
               case 613:
                  if ((0x1000000010L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 614:
               case 617:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(613); }
                  break;
               case 615:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 614;
                  break;
               case 616:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 615;
                  break;
               case 618:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 617;
                  break;
               case 619:
                  if ((0x400000004000L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 620:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 619;
                  break;
               case 621:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 620;
                  break;
               case 622:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 621;
                  break;
               case 624:
                  if ((0x400000004L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 625:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 624;
                  break;
               case 627:
                  if ((0x10000000100000L & l) != 0L && kind > 60)
                     kind = 60;
                  break;
               case 628:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 627;
                  break;
               case 630:
               case 632:
                  if ((0x8000000080000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 631:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 630;
                  break;
               case 634:
                  if ((0x400000004000000L & l) != 0L && kind > 62)
                     kind = 62;
                  break;
               case 635:
               case 636:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(634); }
                  break;
               case 637:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 636;
                  break;
               case 639:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(1796, 1798); }
                  break;
               case 640:
                  if ((0x20000000200L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 641:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 640;
                  break;
               case 642:
                  if ((0x200000002000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 643:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 642;
                  break;
               case 644:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 643;
                  break;
               case 645:
                  if ((0x100000001000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 646:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 645;
                  break;
               case 647:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 646;
                  break;
               case 649:
               case 650:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddTwoStates(650, 651); }
                  break;
               case 651:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(652, 653); }
                  break;
               case 652:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddTwoStates(650, 651); }
                  break;
               case 653:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1547, 1551); }
                  break;
               case 657:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1552, 1559); }
                  break;
               case 658:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1560, 1563); }
                  break;
               case 659:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1564, 1568); }
                  break;
               case 660:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1569, 1574); }
                  break;
               case 661:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1575, 1581); }
                  break;
               case 662:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(652, 663); }
                  break;
               case 663:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1582, 1586); }
                  break;
               case 665:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1587, 1594); }
                  break;
               case 666:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1595, 1598); }
                  break;
               case 667:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1599, 1603); }
                  break;
               case 668:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1604, 1609); }
                  break;
               case 669:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddStates(1610, 1616); }
                  break;
               case 674:
               case 675:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(675, 676); }
                  break;
               case 676:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(677, 678); }
                  break;
               case 677:
                  if ((0xffffff81ffffff81L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(675, 676); }
                  break;
               case 678:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1617, 1621); }
                  break;
               case 682:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1622, 1629); }
                  break;
               case 683:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1630, 1633); }
                  break;
               case 684:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1634, 1638); }
                  break;
               case 685:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1639, 1644); }
                  break;
               case 686:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1645, 1651); }
                  break;
               case 687:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(677, 688); }
                  break;
               case 688:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1652, 1656); }
                  break;
               case 690:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1657, 1664); }
                  break;
               case 691:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1665, 1668); }
                  break;
               case 692:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1669, 1673); }
                  break;
               case 693:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1674, 1679); }
                  break;
               case 694:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddStates(1680, 1686); }
                  break;
               case 695:
                  if (curChar == 92)
                     { jjCheckNAddStates(1706, 1709); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddStates(1701, 1705); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1716, 1717); }
                  break;
               case 3:
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1718, 1719); }
                  break;
               case 24:
               case 25:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(25, 26); }
                  break;
               case 40:
               case 41:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 43:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAddTwoStates(41, 42); }
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1724, 1725); }
                  break;
               case 67:
               case 68:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 73:
               case 74:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 275); }
                  break;
               case 77:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1726, 1727); }
                  break;
               case 79:
               case 80:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 85:
               case 86:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(288, 290); }
                  break;
               case 89:
               case 90:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(296, 301); }
                  break;
               case 93:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1728, 1729); }
                  break;
               case 95:
               case 96:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(96, 97); }
                  break;
               case 102:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(288, 290); }
                  break;
               case 121:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(296, 301); }
                  break;
               case 140:
               case 146:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(511, 513); }
                  break;
               case 156:
               case 162:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(560, 562); }
                  break;
               case 172:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(270, 275); }
                  break;
               case 200:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1746, 1747); }
                  break;
               case 202:
               case 203:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(203, 204); }
                  break;
               case 208:
               case 209:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(734, 737); }
                  break;
               case 212:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1748, 1749); }
                  break;
               case 214:
               case 215:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(215, 216); }
                  break;
               case 221:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(734, 737); }
                  break;
               case 242:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1750, 1751); }
                  break;
               case 244:
               case 245:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(245, 246); }
                  break;
               case 251:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1752, 1753); }
                  break;
               case 253:
               case 254:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(254, 255); }
                  break;
               case 262:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1754, 1755); }
                  break;
               case 264:
               case 265:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(265, 266); }
                  break;
               case 271:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1756, 1757); }
                  break;
               case 273:
               case 274:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(274, 275); }
                  break;
               case 280:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1758, 1759); }
                  break;
               case 282:
               case 283:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(283, 284); }
                  break;
               case 289:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1760, 1761); }
                  break;
               case 291:
               case 292:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(292, 293); }
                  break;
               case 298:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1762, 1763); }
                  break;
               case 300:
               case 301:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(301, 302); }
                  break;
               case 309:
               case 315:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(895, 897); }
                  break;
               case 324:
               case 329:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 339:
               case 345:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(974, 976); }
                  break;
               case 354:
               case 359:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAddTwoStates(354, 355); }
                  break;
               case 369:
               case 370:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 372:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 37)
                     kind = 37;
                  { jjCheckNAddTwoStates(370, 371); }
                  break;
               case 382:
               case 383:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1088, 1090); }
                  break;
               case 386:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1088, 1090); }
                  break;
               case 415:
               case 416:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 418:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddTwoStates(416, 417); }
                  break;
               case 436:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(436, 437); }
                  break;
               case 438:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(436, 437); }
                  break;
               case 451:
               case 467:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1319, 1321); }
                  break;
               case 455:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1782, 1783); }
                  break;
               case 457:
               case 458:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(458, 459); }
                  break;
               case 477:
               case 483:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1372, 1374); }
                  break;
               case 492:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1416, 1419); }
                  break;
               case 494:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(1416, 1419); }
                  break;
               case 506:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(1794, 1795); }
                  break;
               case 508:
               case 509:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(509, 510); }
                  break;
               case 649:
               case 650:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddTwoStates(650, 651); }
                  break;
               case 652:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  { jjCheckNAddTwoStates(650, 651); }
                  break;
               case 674:
               case 675:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(675, 676); }
                  break;
               case 677:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(675, 676); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 769 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   697, 698, 699, 564, 700, 701, 702, 567, 703, 704, 705, 570, 706, 707, 708, 573, 
   709, 710, 711, 576, 712, 713, 714, 579, 715, 716, 717, 584, 718, 719, 720, 589, 
   721, 722, 723, 592, 724, 725, 726, 594, 727, 728, 729, 596, 730, 731, 732, 599, 
   733, 734, 735, 602, 736, 737, 738, 605, 739, 740, 741, 608, 742, 743, 744, 612, 
   616, 618, 622, 745, 746, 747, 625, 748, 749, 750, 628, 751, 752, 753, 631, 632, 
   754, 755, 756, 635, 637, 757, 758, 759, 760, 761, 762, 649, 763, 764, 765, 671, 
   766, 767, 768, 662, 639, 248, 249, 257, 258, 259, 268, 269, 8, 277, 278, 9, 
   286, 287, 10, 295, 296, 11, 304, 305, 306, 562, 565, 568, 571, 574, 577, 580, 
   585, 590, 593, 595, 597, 600, 603, 606, 609, 623, 626, 629, 633, 638, 648, 670, 
   672, 673, 674, 687, 414, 415, 436, 437, 428, 369, 382, 396, 404, 339, 340, 354, 
   355, 341, 309, 310, 324, 325, 311, 196, 63, 72, 73, 182, 2, 3, 6, 3, 
   5, 6, 28, 37, 20, 23, 24, 27, 24, 26, 27, 40, 53, 41, 46, 47, 
   42, 48, 41, 49, 46, 47, 42, 50, 51, 52, 41, 46, 47, 42, 41, 49, 
   46, 47, 42, 41, 49, 46, 47, 42, 50, 41, 49, 46, 47, 42, 50, 51, 
   55, 47, 41, 42, 56, 57, 55, 47, 41, 42, 58, 59, 60, 55, 47, 41, 
   42, 57, 55, 47, 41, 42, 57, 55, 47, 41, 42, 58, 57, 55, 47, 41, 
   42, 58, 59, 71, 72, 73, 182, 63, 66, 67, 70, 67, 69, 70, 74, 75, 
   84, 85, 100, 171, 83, 84, 85, 100, 101, 75, 78, 79, 82, 79, 81, 82, 
   86, 87, 103, 88, 89, 139, 155, 131, 84, 85, 90, 91, 100, 120, 84, 85, 
   99, 100, 101, 91, 94, 95, 98, 95, 97, 98, 86, 106, 107, 87, 103, 108, 
   86, 109, 106, 107, 87, 103, 110, 111, 112, 86, 106, 107, 87, 103, 86, 109, 
   106, 107, 87, 103, 86, 109, 106, 107, 87, 103, 110, 86, 109, 106, 107, 87, 
   103, 110, 111, 114, 107, 86, 87, 103, 115, 116, 114, 107, 86, 87, 103, 117, 
   118, 119, 114, 107, 86, 87, 103, 116, 114, 107, 86, 87, 103, 116, 114, 107, 
   86, 87, 103, 117, 116, 114, 107, 86, 87, 103, 117, 118, 84, 85, 90, 124, 
   100, 120, 125, 126, 84, 85, 90, 91, 99, 100, 101, 91, 120, 84, 85, 90, 
   127, 124, 100, 120, 125, 128, 129, 130, 84, 85, 90, 124, 100, 120, 125, 84, 
   85, 90, 127, 124, 100, 120, 125, 84, 85, 90, 127, 124, 100, 120, 125, 128, 
   84, 85, 90, 127, 124, 100, 120, 125, 128, 129, 84, 85, 133, 90, 100, 120, 
   125, 134, 84, 85, 135, 133, 90, 100, 120, 125, 136, 137, 138, 84, 85, 133, 
   90, 100, 120, 125, 84, 85, 135, 133, 90, 100, 120, 125, 84, 85, 135, 133, 
   90, 100, 120, 125, 136, 84, 85, 135, 133, 90, 100, 120, 125, 136, 137, 140, 
   141, 142, 84, 85, 91, 100, 101, 140, 148, 149, 141, 142, 150, 140, 151, 148, 
   149, 141, 142, 152, 153, 154, 140, 148, 149, 141, 142, 140, 151, 148, 149, 141, 
   142, 140, 151, 148, 149, 141, 142, 152, 140, 151, 148, 149, 141, 142, 152, 153, 
   156, 157, 158, 156, 164, 165, 157, 158, 166, 156, 167, 164, 165, 157, 158, 168, 
   169, 170, 156, 164, 165, 157, 158, 156, 167, 164, 165, 157, 158, 156, 167, 164, 
   165, 157, 158, 168, 156, 167, 164, 165, 157, 158, 168, 169, 74, 175, 84, 85, 
   100, 171, 176, 177, 74, 75, 83, 84, 85, 100, 101, 75, 171, 74, 178, 175, 
   84, 85, 100, 171, 176, 179, 180, 181, 74, 175, 84, 85, 100, 171, 176, 74, 
   178, 175, 84, 85, 100, 171, 176, 74, 178, 175, 84, 85, 100, 171, 176, 179, 
   74, 178, 175, 84, 85, 100, 171, 176, 179, 180, 184, 74, 84, 85, 100, 171, 
   176, 185, 186, 184, 74, 84, 85, 100, 171, 176, 187, 188, 189, 184, 74, 84, 
   85, 100, 171, 176, 186, 184, 74, 84, 85, 100, 171, 176, 186, 184, 74, 84, 
   85, 100, 171, 176, 187, 186, 184, 74, 84, 85, 100, 171, 176, 187, 188, 198, 
   207, 208, 231, 206, 207, 208, 231, 198, 201, 202, 205, 202, 204, 205, 209, 210, 
   219, 220, 218, 219, 210, 213, 214, 217, 214, 216, 217, 209, 224, 219, 220, 225, 
   226, 209, 210, 218, 219, 210, 220, 209, 227, 224, 219, 220, 225, 228, 229, 230, 
   209, 224, 219, 220, 225, 209, 227, 224, 219, 220, 225, 209, 227, 224, 219, 220, 
   225, 228, 209, 227, 224, 219, 220, 225, 228, 229, 233, 209, 219, 220, 225, 234, 
   235, 233, 209, 219, 220, 225, 236, 237, 238, 233, 209, 219, 220, 225, 235, 233, 
   209, 219, 220, 225, 235, 233, 209, 219, 220, 225, 236, 235, 233, 209, 219, 220, 
   225, 236, 237, 243, 244, 247, 244, 246, 247, 252, 253, 256, 253, 255, 256, 257, 
   258, 259, 263, 264, 267, 264, 266, 267, 268, 269, 8, 272, 273, 276, 273, 275, 
   276, 277, 278, 9, 281, 282, 285, 282, 284, 285, 286, 287, 10, 290, 291, 294, 
   291, 293, 294, 295, 296, 11, 299, 300, 303, 300, 302, 303, 304, 305, 306, 309, 
   310, 311, 309, 317, 318, 310, 311, 319, 309, 320, 317, 318, 310, 311, 321, 322, 
   323, 309, 317, 318, 310, 311, 309, 320, 317, 318, 310, 311, 309, 320, 317, 318, 
   310, 311, 321, 309, 320, 317, 318, 310, 311, 321, 322, 324, 331, 332, 325, 333, 
   324, 334, 331, 332, 325, 335, 336, 337, 324, 331, 332, 325, 324, 334, 331, 332, 
   325, 324, 334, 331, 332, 325, 335, 324, 334, 331, 332, 325, 335, 336, 339, 340, 
   341, 339, 347, 348, 340, 341, 349, 339, 350, 347, 348, 340, 341, 351, 352, 353, 
   339, 347, 348, 340, 341, 339, 350, 347, 348, 340, 341, 339, 350, 347, 348, 340, 
   341, 351, 339, 350, 347, 348, 340, 341, 351, 352, 354, 361, 362, 355, 363, 354, 
   364, 361, 362, 355, 365, 366, 367, 354, 361, 362, 355, 354, 364, 361, 362, 355, 
   354, 364, 361, 362, 355, 365, 354, 364, 361, 362, 355, 365, 366, 370, 375, 376, 
   371, 377, 370, 378, 375, 376, 371, 379, 380, 381, 370, 375, 376, 371, 370, 378, 
   375, 376, 371, 370, 378, 375, 376, 371, 379, 370, 378, 375, 376, 371, 379, 380, 
   383, 384, 385, 383, 389, 390, 384, 385, 391, 383, 392, 389, 390, 384, 385, 393, 
   394, 395, 383, 389, 390, 384, 385, 383, 392, 389, 390, 384, 385, 383, 392, 389, 
   390, 384, 385, 393, 383, 392, 389, 390, 384, 385, 393, 394, 398, 390, 383, 384, 
   385, 399, 400, 398, 390, 383, 384, 385, 401, 402, 403, 398, 390, 383, 384, 385, 
   400, 398, 390, 383, 384, 385, 400, 398, 390, 383, 384, 385, 401, 400, 398, 390, 
   383, 384, 385, 401, 402, 406, 376, 370, 371, 407, 408, 406, 376, 370, 371, 409, 
   410, 411, 406, 376, 370, 371, 408, 406, 376, 370, 371, 408, 406, 376, 370, 371, 
   409, 408, 406, 376, 370, 371, 409, 410, 416, 421, 422, 417, 423, 416, 424, 421, 
   422, 417, 425, 426, 427, 416, 421, 422, 417, 416, 424, 421, 422, 417, 416, 424, 
   421, 422, 417, 425, 416, 424, 421, 422, 417, 425, 426, 430, 422, 416, 417, 431, 
   432, 430, 422, 416, 417, 433, 434, 435, 430, 422, 416, 417, 432, 430, 422, 416, 
   417, 432, 430, 422, 416, 417, 433, 432, 430, 422, 416, 417, 433, 434, 436, 441, 
   442, 437, 443, 436, 444, 441, 442, 437, 445, 446, 447, 436, 441, 442, 437, 436, 
   444, 441, 442, 437, 436, 444, 441, 442, 437, 445, 436, 444, 441, 442, 437, 445, 
   446, 450, 476, 492, 462, 493, 504, 451, 452, 463, 461, 462, 453, 456, 457, 460, 
   457, 459, 460, 451, 469, 470, 452, 463, 471, 451, 472, 469, 470, 452, 463, 473, 
   474, 475, 451, 469, 470, 452, 463, 451, 472, 469, 470, 452, 463, 451, 472, 469, 
   470, 452, 463, 473, 451, 472, 469, 470, 452, 463, 473, 474, 477, 478, 479, 477, 
   485, 486, 478, 479, 487, 477, 488, 485, 486, 478, 479, 489, 490, 491, 477, 485, 
   486, 478, 479, 477, 488, 485, 486, 478, 479, 477, 488, 485, 486, 478, 479, 489, 
   477, 488, 485, 486, 478, 479, 489, 490, 492, 453, 462, 493, 492, 497, 462, 493, 
   498, 499, 492, 453, 461, 462, 453, 493, 492, 500, 497, 462, 493, 498, 501, 502, 
   503, 492, 497, 462, 493, 498, 492, 500, 497, 462, 493, 498, 492, 500, 497, 462, 
   493, 498, 501, 492, 500, 497, 462, 493, 498, 501, 502, 512, 450, 476, 492, 461, 
   462, 453, 493, 504, 507, 508, 511, 508, 510, 511, 512, 450, 476, 492, 462, 493, 
   504, 516, 522, 518, 519, 520, 521, 518, 519, 520, 523, 528, 532, 536, 540, 544, 
   518, 542, 543, 518, 545, 546, 547, 518, 545, 546, 527, 553, 554, 555, 527, 553, 
   554, 557, 550, 558, 559, 560, 557, 550, 558, 557, 550, 558, 559, 609, 612, 616, 
   618, 622, 629, 631, 632, 633, 635, 637, 648, 649, 662, 650, 655, 656, 651, 657, 
   650, 658, 655, 656, 651, 659, 660, 661, 650, 655, 656, 651, 650, 658, 655, 656, 
   651, 650, 658, 655, 656, 651, 659, 650, 658, 655, 656, 651, 659, 660, 664, 656, 
   650, 651, 665, 666, 664, 656, 650, 651, 667, 668, 669, 664, 656, 650, 651, 666, 
   664, 656, 650, 651, 666, 664, 656, 650, 651, 667, 666, 664, 656, 650, 651, 667, 
   668, 675, 680, 681, 676, 682, 675, 683, 680, 681, 676, 684, 685, 686, 675, 680, 
   681, 676, 675, 683, 680, 681, 676, 675, 683, 680, 681, 676, 684, 675, 683, 680, 
   681, 676, 684, 685, 689, 681, 675, 676, 690, 691, 689, 681, 675, 676, 692, 693, 
   694, 689, 681, 675, 676, 691, 689, 681, 675, 676, 691, 689, 681, 675, 676, 692, 
   691, 689, 681, 675, 676, 692, 693, 742, 612, 616, 618, 622, 751, 631, 632, 754, 
   635, 637, 760, 649, 662, 370, 383, 384, 385, 371, 372, 405, 386, 397, 39, 40, 
   53, 514, 515, 548, 1, 2, 22, 23, 63, 72, 73, 182, 65, 66, 77, 78, 
   93, 94, 102, 113, 121, 122, 143, 145, 146, 147, 159, 161, 162, 163, 172, 173, 
   102, 113, 200, 201, 212, 213, 242, 243, 251, 252, 262, 263, 271, 272, 280, 281, 
   289, 290, 298, 299, 312, 314, 315, 316, 326, 328, 329, 330, 342, 344, 345, 346, 
   356, 358, 359, 360, 438, 439, 455, 456, 464, 466, 467, 468, 480, 482, 483, 484, 
   494, 495, 506, 507, 641, 644, 647, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\74\41\55\55", "\55\55\76", 
null, "\174\75", null, null, "\55", null, null, null, null, null, null, null, null, 
null, null, null, "\175", "\136\75", "\44\75", "\52\75", "\75", "\73", "\57", 
"\133", "\135", "\52", "\56", "\51", "\50", "\72", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\72\72", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\174", "\45", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CssParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CssParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 769; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffe00001L, 0x3ff803fffffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[769];
    private final int[] jjstateSet = new int[2 * 769];

    
    protected char curChar;
}
